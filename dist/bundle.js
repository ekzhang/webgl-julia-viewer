!function(e){var n={};function t(o){if(n[o])return n[o].exports;var r=n[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,t),r.l=!0,r.exports}t.m=e,t.c=n,t.d=function(e,n,o){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:o})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(t.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var r in e)t.d(o,r,function(n){return e[n]}.bind(null,r));return o},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=2)}([function(e,n){e.exports="attribute vec2 a_position;\n\nvoid main() {\n  gl_Position = vec4(a_position, 0.0, 1.0);\n}\n"},function(e,n){e.exports="/* Modified from: https://gpfault.net/posts/mandelbrot-webgl.txt.html */\n\n/* Fragment shader that renders Mandelbrot set */\nprecision highp float;\n\n/* Width and height of screen in pixels */\nuniform vec2 u_resolution;\n\n/* Point on the complex plane that will be mapped to the center of the screen */\nuniform vec2 u_zoomCenter;\n\n/* Distance between left and right edges of the screen. This essentially specifies\n   which points on the plane are mapped to left and right edges of the screen.\n  Together, u_zoomCenter and u_zoomSize determine which piece of the complex\n   plane is displayed. */\nuniform float u_zoomSize;\n\n/* How many iterations to do before deciding that a point is in the set. */\nuniform int u_maxIterations;\n\n/* Constant c for the Julia set quadratic polynomial. */\nuniform vec2 u_juliaConstant;\n\nvec2 sq(vec2 z) {\n  return mat2(z, -z.y, z.x) * z;\n}\n\nvec2 f(vec2 z, vec2 c) {\n\treturn sq(z) + c;\n}\n\nvec3 palette(float x) {\n  float CONTROL_X[6];\n  CONTROL_X[0] = 0.0;\n  CONTROL_X[1] = 0.16;\n  CONTROL_X[2] = 0.42;\n  CONTROL_X[3] = 0.6425;\n  CONTROL_X[4] = 0.8575;\n  CONTROL_X[5] = 1.0;\n  vec3 CONTROL_C[6];\n  CONTROL_C[0] = vec3(0.0, 7.0, 100.0);\n  CONTROL_C[1] = vec3(32.0, 107.0, 203.0);\n  CONTROL_C[2] = vec3(237.0, 255.0, 255.0);\n  CONTROL_C[3] = vec3(255.0, 170.0, 0.0);\n  CONTROL_C[4] = vec3(0.0, 2.0, 0.0);\n  CONTROL_C[5] = vec3(0.0, 7.0, 100.0);\n\n  for (int i = 0; i < 5; i++) {\n    if (CONTROL_X[i + 1] >= x) {\n      float k = (x - CONTROL_X[i]) / (CONTROL_X[i + 1] - CONTROL_X[i]);\n      vec3 c1 = CONTROL_C[i];\n      vec3 c2 = CONTROL_C[i + 1];\n      return ((1.0 - k) * c1 + k * c2) / 256.0;\n    }\n  }\n\n  // This should not be executed\n  return vec3(0.0);\n}\n\nvoid main() {\n  vec2 uv = gl_FragCoord.xy / u_resolution;\n\n  /* Decide which point on the complex plane this fragment corresponds to.*/\n  vec2 z = (uv - vec2(0.5)) * u_zoomSize;\n  z.y *= u_resolution.y / u_resolution.x;\n  z += u_zoomCenter;\n\n  vec2 c = u_juliaConstant;\n  float smoothColor = 0.0;\n  for (int i = 0; i < 10000; i++) {\n    if (i >= u_maxIterations) break;\n    float norm = length(z);\n    smoothColor += exp(-norm);\n    if (norm > 30.0)\n      break;\n    z = f(z, c);\n  }\n  smoothColor /= float(u_maxIterations);\n  smoothColor = fract(smoothColor * 10.0);\n  gl_FragColor = vec4(palette(smoothColor), 1.0);\n}\n"},function(e,n,t){"use strict";t.r(n);var o=t(1),r=t.n(o),i=t(0),a=t.n(i),c=document.querySelector("#glCanvas");function u(){c.width=window.innerWidth,c.height=window.innerHeight}u(),window.addEventListener("resize",u);var l=c.getContext("webgl");null===l&&alert("Unable to initialize WebGL. Your browser or machine may not support it.");var s=l.createShader(l.VERTEX_SHADER),f=l.createShader(l.FRAGMENT_SHADER);l.shaderSource(s,a.a),l.shaderSource(f,r.a),l.compileShader(s),l.compileShader(f);var d=l.createProgram();l.attachShader(d,s),l.attachShader(d,f),l.linkProgram(d),l.useProgram(d);var h=l.createBuffer();l.bindBuffer(l.ARRAY_BUFFER,h),l.bufferData(l.ARRAY_BUFFER,new Float32Array([-1,1,-1,-1,1,1,1,1,-1,-1,1,-1]),l.STATIC_DRAW);var m=l.getAttribLocation(d,"a_position");l.enableVertexAttribArray(m),l.vertexAttribPointer(m,2,l.FLOAT,!1,0,0);var v,_=l.getUniformLocation(d,"u_maxIterations"),p=l.getUniformLocation(d,"u_resolution"),C=l.getUniformLocation(d,"u_zoomCenter"),O=l.getUniformLocation(d,"u_zoomSize"),g=l.getUniformLocation(d,"u_juliaConstant"),L=!1,b=[-.76,.22],R=4,T=[0,0];function w(e,n){return e=e/c.width-.5,n=(c.height-1-n)/c.height-.5,n*=c.height/c.width,[e=e*R+T[0],n=n*R+T[1]]}c.addEventListener("mousedown",function(e){L=!0,b=v=w(e.clientX,e.clientY)}),c.addEventListener("mousemove",function(e){v=w(e.clientX,e.clientY),L&&(b=v)}),c.addEventListener("mouseup",function(e){L=!1}),c.addEventListener("wheel",function(e){var n=Math.pow(2,-e.deltaY/2e3);R*=n,T=[n*(T[0]-v[0])+v[0],n*(T[1]-v[1])+v[1]]}),function e(){l.viewport(0,0,l.canvas.width,l.canvas.height),l.uniform1i(_,512),l.uniform2fv(p,[c.width,c.height]),l.uniform2fv(C,T),l.uniform1f(O,R),l.uniform2fv(g,b),l.drawArrays(l.TRIANGLES,0,6),requestAnimationFrame(e)}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,